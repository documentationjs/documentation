[
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "This function destructures with defaults. It should not\nhave any parameter descriptions.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 2,
                  "column": 33,
                  "offset": 88
                },
                "indent": [
                  1
                ]
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 2,
              "column": 33,
              "offset": 88
            },
            "indent": [
              1
            ]
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 2,
          "column": 33,
          "offset": 88
        }
      }
    },
    "tags": [],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 4,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 5,
          "column": 0
        },
        "end": {
          "line": 6,
          "column": 1
        }
      },
      "code": "/**\n * This function destructures with defaults. It should not\n * have any parameter descriptions.\n */\nfunction destructure({phoneNumbers = [], emailAddresses = [], ...params} = {}) {\n}\n\n/**\n * Similar, but with an array\n * @example\n * destructure([1, 2, 3])\n */\nfunction destructure([a, b, c]) {\n}\n\n/**\n * This function returns the number one.\n * @param {Array<Number>} a an array of numbers\n * @returns {Number} numberone\n */\nvar multiply = (a, b) => a * b;\n\n/**\n * This is a sink\n */\nclass Sink {\n  /**\n   * This is a property of the sink.\n   */\n  staticProp = 42;\n\n  /**\n   * Is it empty\n   */\n  empty() {\n    return 1;\n  }\n\n  /**\n   * This method says hello\n   */\n  static hello() {\n    return 'hello';\n  }\n\n  /**\n   * This is a getter method: it should be documented\n   * as a property.\n   */\n  get aGetter() {\n    return 42;\n  }\n\n  /**\n   * @param {number} height the height of the thing\n   * @param {number} width the width of the thing\n   */\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\n/**\n * This method returns a basket. The type should not be linked.\n *\n * @returns {Basket} a basket\n */\nfunction makeABasket() {\n}\n\n/**\n * This method returns a {@link Sink sink}. The type should be linked.\n * It takes a {@link number} which should also be linked.\n *\n * @returns {Sink} a sink\n */\nfunction makeASink() {\n}\n\n/**\n * This function takes rest params\n */\nfunction functionWithRest(...someParams) {\n}\n\n/**\n * So does this one, with types\n */\nfunction functionWithRestAndType(...someParams: number) {\n}\n\n// FUNCTION TYPES\n\n/**\n * This is an async method\n */\nasync function foo() { }\n\nexport default multiply;\n\n/**\n * @public\n */\nexport default (thisIsTheArgument) => {};\n\n/**\n * This function returns the number one.\n * @returns {Number} numberone\n */\nmodule.exports = () => (<p>hello</p>);\n\n/**\n * This tests our support of optional parameters in ES6\n */\nfunction veryImportantTransform(foo = 'bar') {\n  return \"42\";\n}\n\n// ACCESS LEVELS\n\n/**\n * A private function\n * @private\n */\nfunction iAmPrivate() { }\n\n/**\n * A protected function\n * @protected\n */\nfunction iAmProtected() { }\n\n/**\n * A public function\n * @public\n */\nfunction iAmPublic() { }\n\n/**\n * A private function using the access tag\n * @access private\n */\nfunction iAmAccessPrivate() { }\n\n/**\n * This is re-exported\n */\nexport { execute } from 'external-module';\n"
    },
    "errors": [],
    "name": "destructure",
    "kind": "function",
    "params": [
      {
        "title": "param",
        "name": "$0",
        "type": {
          "type": "NameExpression",
          "name": "Object"
        },
        "default": "{}",
        "properties": [
          {
            "title": "param",
            "name": "$0.phoneNumbers",
            "default": "[]"
          },
          {
            "title": "param",
            "name": "$0.emailAddresses",
            "default": "[]"
          },
          {
            "title": "param",
            "name": "$0.params",
            "lineNumber": 5,
            "type": {
              "type": "RestType"
            }
          }
        ]
      }
    ],
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "destructure",
        "kind": "function"
      }
    ],
    "namespace": "destructure"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Similar, but with an array",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 27,
                  "offset": 26
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 27,
              "offset": 26
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 27,
          "offset": 26
        }
      }
    },
    "tags": [
      {
        "title": "example",
        "description": "destructure([1, 2, 3])",
        "lineNumber": 2
      }
    ],
    "loc": {
      "start": {
        "line": 8,
        "column": 0
      },
      "end": {
        "line": 12,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 13,
          "column": 0
        },
        "end": {
          "line": 14,
          "column": 1
        }
      },
      "code": "/**\n * This function destructures with defaults. It should not\n * have any parameter descriptions.\n */\nfunction destructure({phoneNumbers = [], emailAddresses = [], ...params} = {}) {\n}\n\n/**\n * Similar, but with an array\n * @example\n * destructure([1, 2, 3])\n */\nfunction destructure([a, b, c]) {\n}\n\n/**\n * This function returns the number one.\n * @param {Array<Number>} a an array of numbers\n * @returns {Number} numberone\n */\nvar multiply = (a, b) => a * b;\n\n/**\n * This is a sink\n */\nclass Sink {\n  /**\n   * This is a property of the sink.\n   */\n  staticProp = 42;\n\n  /**\n   * Is it empty\n   */\n  empty() {\n    return 1;\n  }\n\n  /**\n   * This method says hello\n   */\n  static hello() {\n    return 'hello';\n  }\n\n  /**\n   * This is a getter method: it should be documented\n   * as a property.\n   */\n  get aGetter() {\n    return 42;\n  }\n\n  /**\n   * @param {number} height the height of the thing\n   * @param {number} width the width of the thing\n   */\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\n/**\n * This method returns a basket. The type should not be linked.\n *\n * @returns {Basket} a basket\n */\nfunction makeABasket() {\n}\n\n/**\n * This method returns a {@link Sink sink}. The type should be linked.\n * It takes a {@link number} which should also be linked.\n *\n * @returns {Sink} a sink\n */\nfunction makeASink() {\n}\n\n/**\n * This function takes rest params\n */\nfunction functionWithRest(...someParams) {\n}\n\n/**\n * So does this one, with types\n */\nfunction functionWithRestAndType(...someParams: number) {\n}\n\n// FUNCTION TYPES\n\n/**\n * This is an async method\n */\nasync function foo() { }\n\nexport default multiply;\n\n/**\n * @public\n */\nexport default (thisIsTheArgument) => {};\n\n/**\n * This function returns the number one.\n * @returns {Number} numberone\n */\nmodule.exports = () => (<p>hello</p>);\n\n/**\n * This tests our support of optional parameters in ES6\n */\nfunction veryImportantTransform(foo = 'bar') {\n  return \"42\";\n}\n\n// ACCESS LEVELS\n\n/**\n * A private function\n * @private\n */\nfunction iAmPrivate() { }\n\n/**\n * A protected function\n * @protected\n */\nfunction iAmProtected() { }\n\n/**\n * A public function\n * @public\n */\nfunction iAmPublic() { }\n\n/**\n * A private function using the access tag\n * @access private\n */\nfunction iAmAccessPrivate() { }\n\n/**\n * This is re-exported\n */\nexport { execute } from 'external-module';\n"
    },
    "errors": [],
    "examples": [
      {
        "description": "destructure([1, 2, 3])"
      }
    ],
    "name": "destructure",
    "kind": "function",
    "params": [
      {
        "title": "param",
        "name": "$0",
        "type": {
          "type": "NameExpression",
          "name": "Array"
        },
        "properties": [
          {
            "title": "param",
            "name": "$0.a",
            "lineNumber": 13
          },
          {
            "title": "param",
            "name": "$0.b",
            "lineNumber": 13
          },
          {
            "title": "param",
            "name": "$0.c",
            "lineNumber": 13
          }
        ]
      }
    ],
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "destructure",
        "kind": "function"
      }
    ],
    "namespace": "destructure"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "This function returns the number one.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 38,
                  "offset": 37
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 38,
              "offset": 37
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 38,
          "offset": 37
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "an array of numbers",
        "lineNumber": 2,
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "Array"
          },
          "applications": [
            {
              "type": "NameExpression",
              "name": "Number"
            }
          ]
        },
        "name": "a"
      },
      {
        "title": "returns",
        "description": "numberone",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "Number"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 16,
        "column": 0
      },
      "end": {
        "line": 20,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 21,
          "column": 0
        },
        "end": {
          "line": 21,
          "column": 31
        }
      },
      "code": "/**\n * This function destructures with defaults. It should not\n * have any parameter descriptions.\n */\nfunction destructure({phoneNumbers = [], emailAddresses = [], ...params} = {}) {\n}\n\n/**\n * Similar, but with an array\n * @example\n * destructure([1, 2, 3])\n */\nfunction destructure([a, b, c]) {\n}\n\n/**\n * This function returns the number one.\n * @param {Array<Number>} a an array of numbers\n * @returns {Number} numberone\n */\nvar multiply = (a, b) => a * b;\n\n/**\n * This is a sink\n */\nclass Sink {\n  /**\n   * This is a property of the sink.\n   */\n  staticProp = 42;\n\n  /**\n   * Is it empty\n   */\n  empty() {\n    return 1;\n  }\n\n  /**\n   * This method says hello\n   */\n  static hello() {\n    return 'hello';\n  }\n\n  /**\n   * This is a getter method: it should be documented\n   * as a property.\n   */\n  get aGetter() {\n    return 42;\n  }\n\n  /**\n   * @param {number} height the height of the thing\n   * @param {number} width the width of the thing\n   */\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\n/**\n * This method returns a basket. The type should not be linked.\n *\n * @returns {Basket} a basket\n */\nfunction makeABasket() {\n}\n\n/**\n * This method returns a {@link Sink sink}. The type should be linked.\n * It takes a {@link number} which should also be linked.\n *\n * @returns {Sink} a sink\n */\nfunction makeASink() {\n}\n\n/**\n * This function takes rest params\n */\nfunction functionWithRest(...someParams) {\n}\n\n/**\n * So does this one, with types\n */\nfunction functionWithRestAndType(...someParams: number) {\n}\n\n// FUNCTION TYPES\n\n/**\n * This is an async method\n */\nasync function foo() { }\n\nexport default multiply;\n\n/**\n * @public\n */\nexport default (thisIsTheArgument) => {};\n\n/**\n * This function returns the number one.\n * @returns {Number} numberone\n */\nmodule.exports = () => (<p>hello</p>);\n\n/**\n * This tests our support of optional parameters in ES6\n */\nfunction veryImportantTransform(foo = 'bar') {\n  return \"42\";\n}\n\n// ACCESS LEVELS\n\n/**\n * A private function\n * @private\n */\nfunction iAmPrivate() { }\n\n/**\n * A protected function\n * @protected\n */\nfunction iAmProtected() { }\n\n/**\n * A public function\n * @public\n */\nfunction iAmPublic() { }\n\n/**\n * A private function using the access tag\n * @access private\n */\nfunction iAmAccessPrivate() { }\n\n/**\n * This is re-exported\n */\nexport { execute } from 'external-module';\n"
    },
    "errors": [],
    "params": [
      {
        "name": "a",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "an array of numbers",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 20,
                      "offset": 19
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 20,
                  "offset": 19
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 20,
              "offset": 19
            }
          }
        },
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "Array"
          },
          "applications": [
            {
              "type": "NameExpression",
              "name": "Number"
            }
          ]
        }
      },
      {
        "title": "param",
        "name": "b",
        "lineNumber": 21
      }
    ],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "numberone",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 10,
                      "offset": 9
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 10,
                  "offset": 9
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 10,
              "offset": 9
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Number"
        }
      }
    ],
    "name": "multiply",
    "kind": "function",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "multiply",
        "kind": "function"
      }
    ],
    "namespace": "multiply"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "This is a sink",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 15,
                  "offset": 14
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 15,
              "offset": 14
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 15,
          "offset": 14
        }
      }
    },
    "tags": [],
    "loc": {
      "start": {
        "line": 23,
        "column": 0
      },
      "end": {
        "line": 25,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 26,
          "column": 0
        },
        "end": {
          "line": 62,
          "column": 1
        }
      },
      "code": "/**\n * This function destructures with defaults. It should not\n * have any parameter descriptions.\n */\nfunction destructure({phoneNumbers = [], emailAddresses = [], ...params} = {}) {\n}\n\n/**\n * Similar, but with an array\n * @example\n * destructure([1, 2, 3])\n */\nfunction destructure([a, b, c]) {\n}\n\n/**\n * This function returns the number one.\n * @param {Array<Number>} a an array of numbers\n * @returns {Number} numberone\n */\nvar multiply = (a, b) => a * b;\n\n/**\n * This is a sink\n */\nclass Sink {\n  /**\n   * This is a property of the sink.\n   */\n  staticProp = 42;\n\n  /**\n   * Is it empty\n   */\n  empty() {\n    return 1;\n  }\n\n  /**\n   * This method says hello\n   */\n  static hello() {\n    return 'hello';\n  }\n\n  /**\n   * This is a getter method: it should be documented\n   * as a property.\n   */\n  get aGetter() {\n    return 42;\n  }\n\n  /**\n   * @param {number} height the height of the thing\n   * @param {number} width the width of the thing\n   */\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\n/**\n * This method returns a basket. The type should not be linked.\n *\n * @returns {Basket} a basket\n */\nfunction makeABasket() {\n}\n\n/**\n * This method returns a {@link Sink sink}. The type should be linked.\n * It takes a {@link number} which should also be linked.\n *\n * @returns {Sink} a sink\n */\nfunction makeASink() {\n}\n\n/**\n * This function takes rest params\n */\nfunction functionWithRest(...someParams) {\n}\n\n/**\n * So does this one, with types\n */\nfunction functionWithRestAndType(...someParams: number) {\n}\n\n// FUNCTION TYPES\n\n/**\n * This is an async method\n */\nasync function foo() { }\n\nexport default multiply;\n\n/**\n * @public\n */\nexport default (thisIsTheArgument) => {};\n\n/**\n * This function returns the number one.\n * @returns {Number} numberone\n */\nmodule.exports = () => (<p>hello</p>);\n\n/**\n * This tests our support of optional parameters in ES6\n */\nfunction veryImportantTransform(foo = 'bar') {\n  return \"42\";\n}\n\n// ACCESS LEVELS\n\n/**\n * A private function\n * @private\n */\nfunction iAmPrivate() { }\n\n/**\n * A protected function\n * @protected\n */\nfunction iAmProtected() { }\n\n/**\n * A public function\n * @public\n */\nfunction iAmPublic() { }\n\n/**\n * A private function using the access tag\n * @access private\n */\nfunction iAmAccessPrivate() { }\n\n/**\n * This is re-exported\n */\nexport { execute } from 'external-module';\n"
    },
    "errors": [],
    "name": "Sink",
    "kind": "class",
    "members": {
      "instance": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "This is a property of the sink.",
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 32,
                        "offset": 31
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 32,
                    "offset": 31
                  },
                  "indent": []
                }
              }
            ],
            "position": {
              "start": {
                "line": 1,
                "column": 1,
                "offset": 0
              },
              "end": {
                "line": 1,
                "column": 32,
                "offset": 31
              }
            }
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 27,
              "column": 2
            },
            "end": {
              "line": 29,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 30,
                "column": 2
              },
              "end": {
                "line": 30,
                "column": 18
              }
            },
            "code": "/**\n * This function destructures with defaults. It should not\n * have any parameter descriptions.\n */\nfunction destructure({phoneNumbers = [], emailAddresses = [], ...params} = {}) {\n}\n\n/**\n * Similar, but with an array\n * @example\n * destructure([1, 2, 3])\n */\nfunction destructure([a, b, c]) {\n}\n\n/**\n * This function returns the number one.\n * @param {Array<Number>} a an array of numbers\n * @returns {Number} numberone\n */\nvar multiply = (a, b) => a * b;\n\n/**\n * This is a sink\n */\nclass Sink {\n  /**\n   * This is a property of the sink.\n   */\n  staticProp = 42;\n\n  /**\n   * Is it empty\n   */\n  empty() {\n    return 1;\n  }\n\n  /**\n   * This method says hello\n   */\n  static hello() {\n    return 'hello';\n  }\n\n  /**\n   * This is a getter method: it should be documented\n   * as a property.\n   */\n  get aGetter() {\n    return 42;\n  }\n\n  /**\n   * @param {number} height the height of the thing\n   * @param {number} width the width of the thing\n   */\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\n/**\n * This method returns a basket. The type should not be linked.\n *\n * @returns {Basket} a basket\n */\nfunction makeABasket() {\n}\n\n/**\n * This method returns a {@link Sink sink}. The type should be linked.\n * It takes a {@link number} which should also be linked.\n *\n * @returns {Sink} a sink\n */\nfunction makeASink() {\n}\n\n/**\n * This function takes rest params\n */\nfunction functionWithRest(...someParams) {\n}\n\n/**\n * So does this one, with types\n */\nfunction functionWithRestAndType(...someParams: number) {\n}\n\n// FUNCTION TYPES\n\n/**\n * This is an async method\n */\nasync function foo() { }\n\nexport default multiply;\n\n/**\n * @public\n */\nexport default (thisIsTheArgument) => {};\n\n/**\n * This function returns the number one.\n * @returns {Number} numberone\n */\nmodule.exports = () => (<p>hello</p>);\n\n/**\n * This tests our support of optional parameters in ES6\n */\nfunction veryImportantTransform(foo = 'bar') {\n  return \"42\";\n}\n\n// ACCESS LEVELS\n\n/**\n * A private function\n * @private\n */\nfunction iAmPrivate() { }\n\n/**\n * A protected function\n * @protected\n */\nfunction iAmProtected() { }\n\n/**\n * A public function\n * @public\n */\nfunction iAmPublic() { }\n\n/**\n * A private function using the access tag\n * @access private\n */\nfunction iAmAccessPrivate() { }\n\n/**\n * This is re-exported\n */\nexport { execute } from 'external-module';\n"
          },
          "errors": [],
          "name": "staticProp",
          "kind": "member",
          "memberof": "Sink",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            {
              "name": "Sink",
              "kind": "class"
            },
            {
              "name": "staticProp",
              "kind": "member",
              "scope": "instance"
            }
          ],
          "namespace": "Sink#staticProp"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Is it empty",
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 12,
                        "offset": 11
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 12,
                    "offset": 11
                  },
                  "indent": []
                }
              }
            ],
            "position": {
              "start": {
                "line": 1,
                "column": 1,
                "offset": 0
              },
              "end": {
                "line": 1,
                "column": 12,
                "offset": 11
              }
            }
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 32,
              "column": 2
            },
            "end": {
              "line": 34,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 35,
                "column": 2
              },
              "end": {
                "line": 37,
                "column": 3
              }
            },
            "code": "/**\n * This function destructures with defaults. It should not\n * have any parameter descriptions.\n */\nfunction destructure({phoneNumbers = [], emailAddresses = [], ...params} = {}) {\n}\n\n/**\n * Similar, but with an array\n * @example\n * destructure([1, 2, 3])\n */\nfunction destructure([a, b, c]) {\n}\n\n/**\n * This function returns the number one.\n * @param {Array<Number>} a an array of numbers\n * @returns {Number} numberone\n */\nvar multiply = (a, b) => a * b;\n\n/**\n * This is a sink\n */\nclass Sink {\n  /**\n   * This is a property of the sink.\n   */\n  staticProp = 42;\n\n  /**\n   * Is it empty\n   */\n  empty() {\n    return 1;\n  }\n\n  /**\n   * This method says hello\n   */\n  static hello() {\n    return 'hello';\n  }\n\n  /**\n   * This is a getter method: it should be documented\n   * as a property.\n   */\n  get aGetter() {\n    return 42;\n  }\n\n  /**\n   * @param {number} height the height of the thing\n   * @param {number} width the width of the thing\n   */\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\n/**\n * This method returns a basket. The type should not be linked.\n *\n * @returns {Basket} a basket\n */\nfunction makeABasket() {\n}\n\n/**\n * This method returns a {@link Sink sink}. The type should be linked.\n * It takes a {@link number} which should also be linked.\n *\n * @returns {Sink} a sink\n */\nfunction makeASink() {\n}\n\n/**\n * This function takes rest params\n */\nfunction functionWithRest(...someParams) {\n}\n\n/**\n * So does this one, with types\n */\nfunction functionWithRestAndType(...someParams: number) {\n}\n\n// FUNCTION TYPES\n\n/**\n * This is an async method\n */\nasync function foo() { }\n\nexport default multiply;\n\n/**\n * @public\n */\nexport default (thisIsTheArgument) => {};\n\n/**\n * This function returns the number one.\n * @returns {Number} numberone\n */\nmodule.exports = () => (<p>hello</p>);\n\n/**\n * This tests our support of optional parameters in ES6\n */\nfunction veryImportantTransform(foo = 'bar') {\n  return \"42\";\n}\n\n// ACCESS LEVELS\n\n/**\n * A private function\n * @private\n */\nfunction iAmPrivate() { }\n\n/**\n * A protected function\n * @protected\n */\nfunction iAmProtected() { }\n\n/**\n * A public function\n * @public\n */\nfunction iAmPublic() { }\n\n/**\n * A private function using the access tag\n * @access private\n */\nfunction iAmAccessPrivate() { }\n\n/**\n * This is re-exported\n */\nexport { execute } from 'external-module';\n"
          },
          "errors": [],
          "name": "empty",
          "kind": "function",
          "memberof": "Sink",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            {
              "name": "Sink",
              "kind": "class"
            },
            {
              "name": "empty",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "Sink#empty"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "This is a getter method: it should be documented\nas a property.",
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 2,
                        "column": 15,
                        "offset": 63
                      },
                      "indent": [
                        1
                      ]
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 2,
                    "column": 15,
                    "offset": 63
                  },
                  "indent": [
                    1
                  ]
                }
              }
            ],
            "position": {
              "start": {
                "line": 1,
                "column": 1,
                "offset": 0
              },
              "end": {
                "line": 2,
                "column": 15,
                "offset": 63
              }
            }
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 46,
              "column": 2
            },
            "end": {
              "line": 49,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 50,
                "column": 2
              },
              "end": {
                "line": 52,
                "column": 3
              }
            },
            "code": "/**\n * This function destructures with defaults. It should not\n * have any parameter descriptions.\n */\nfunction destructure({phoneNumbers = [], emailAddresses = [], ...params} = {}) {\n}\n\n/**\n * Similar, but with an array\n * @example\n * destructure([1, 2, 3])\n */\nfunction destructure([a, b, c]) {\n}\n\n/**\n * This function returns the number one.\n * @param {Array<Number>} a an array of numbers\n * @returns {Number} numberone\n */\nvar multiply = (a, b) => a * b;\n\n/**\n * This is a sink\n */\nclass Sink {\n  /**\n   * This is a property of the sink.\n   */\n  staticProp = 42;\n\n  /**\n   * Is it empty\n   */\n  empty() {\n    return 1;\n  }\n\n  /**\n   * This method says hello\n   */\n  static hello() {\n    return 'hello';\n  }\n\n  /**\n   * This is a getter method: it should be documented\n   * as a property.\n   */\n  get aGetter() {\n    return 42;\n  }\n\n  /**\n   * @param {number} height the height of the thing\n   * @param {number} width the width of the thing\n   */\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\n/**\n * This method returns a basket. The type should not be linked.\n *\n * @returns {Basket} a basket\n */\nfunction makeABasket() {\n}\n\n/**\n * This method returns a {@link Sink sink}. The type should be linked.\n * It takes a {@link number} which should also be linked.\n *\n * @returns {Sink} a sink\n */\nfunction makeASink() {\n}\n\n/**\n * This function takes rest params\n */\nfunction functionWithRest(...someParams) {\n}\n\n/**\n * So does this one, with types\n */\nfunction functionWithRestAndType(...someParams: number) {\n}\n\n// FUNCTION TYPES\n\n/**\n * This is an async method\n */\nasync function foo() { }\n\nexport default multiply;\n\n/**\n * @public\n */\nexport default (thisIsTheArgument) => {};\n\n/**\n * This function returns the number one.\n * @returns {Number} numberone\n */\nmodule.exports = () => (<p>hello</p>);\n\n/**\n * This tests our support of optional parameters in ES6\n */\nfunction veryImportantTransform(foo = 'bar') {\n  return \"42\";\n}\n\n// ACCESS LEVELS\n\n/**\n * A private function\n * @private\n */\nfunction iAmPrivate() { }\n\n/**\n * A protected function\n * @protected\n */\nfunction iAmProtected() { }\n\n/**\n * A public function\n * @public\n */\nfunction iAmPublic() { }\n\n/**\n * A private function using the access tag\n * @access private\n */\nfunction iAmAccessPrivate() { }\n\n/**\n * This is re-exported\n */\nexport { execute } from 'external-module';\n"
          },
          "errors": [],
          "name": "aGetter",
          "kind": "member",
          "memberof": "Sink",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            {
              "name": "Sink",
              "kind": "class"
            },
            {
              "name": "aGetter",
              "kind": "member",
              "scope": "instance"
            }
          ],
          "namespace": "Sink#aGetter"
        },
        {
          "description": "",
          "tags": [
            {
              "title": "param",
              "description": "the height of the thing",
              "lineNumber": 1,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "height"
            },
            {
              "title": "param",
              "description": "the width of the thing",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "width"
            }
          ],
          "loc": {
            "start": {
              "line": 54,
              "column": 2
            },
            "end": {
              "line": 57,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 58,
                "column": 2
              },
              "end": {
                "line": 61,
                "column": 3
              }
            },
            "code": "/**\n * This function destructures with defaults. It should not\n * have any parameter descriptions.\n */\nfunction destructure({phoneNumbers = [], emailAddresses = [], ...params} = {}) {\n}\n\n/**\n * Similar, but with an array\n * @example\n * destructure([1, 2, 3])\n */\nfunction destructure([a, b, c]) {\n}\n\n/**\n * This function returns the number one.\n * @param {Array<Number>} a an array of numbers\n * @returns {Number} numberone\n */\nvar multiply = (a, b) => a * b;\n\n/**\n * This is a sink\n */\nclass Sink {\n  /**\n   * This is a property of the sink.\n   */\n  staticProp = 42;\n\n  /**\n   * Is it empty\n   */\n  empty() {\n    return 1;\n  }\n\n  /**\n   * This method says hello\n   */\n  static hello() {\n    return 'hello';\n  }\n\n  /**\n   * This is a getter method: it should be documented\n   * as a property.\n   */\n  get aGetter() {\n    return 42;\n  }\n\n  /**\n   * @param {number} height the height of the thing\n   * @param {number} width the width of the thing\n   */\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\n/**\n * This method returns a basket. The type should not be linked.\n *\n * @returns {Basket} a basket\n */\nfunction makeABasket() {\n}\n\n/**\n * This method returns a {@link Sink sink}. The type should be linked.\n * It takes a {@link number} which should also be linked.\n *\n * @returns {Sink} a sink\n */\nfunction makeASink() {\n}\n\n/**\n * This function takes rest params\n */\nfunction functionWithRest(...someParams) {\n}\n\n/**\n * So does this one, with types\n */\nfunction functionWithRestAndType(...someParams: number) {\n}\n\n// FUNCTION TYPES\n\n/**\n * This is an async method\n */\nasync function foo() { }\n\nexport default multiply;\n\n/**\n * @public\n */\nexport default (thisIsTheArgument) => {};\n\n/**\n * This function returns the number one.\n * @returns {Number} numberone\n */\nmodule.exports = () => (<p>hello</p>);\n\n/**\n * This tests our support of optional parameters in ES6\n */\nfunction veryImportantTransform(foo = 'bar') {\n  return \"42\";\n}\n\n// ACCESS LEVELS\n\n/**\n * A private function\n * @private\n */\nfunction iAmPrivate() { }\n\n/**\n * A protected function\n * @protected\n */\nfunction iAmProtected() { }\n\n/**\n * A public function\n * @public\n */\nfunction iAmPublic() { }\n\n/**\n * A private function using the access tag\n * @access private\n */\nfunction iAmAccessPrivate() { }\n\n/**\n * This is re-exported\n */\nexport { execute } from 'external-module';\n"
          },
          "errors": [],
          "params": [
            {
              "name": "height",
              "lineNumber": 1,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "the height of the thing",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 24,
                            "offset": 23
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 24,
                        "offset": 23
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 24,
                    "offset": 23
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            },
            {
              "name": "width",
              "lineNumber": 2,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "the width of the thing",
                        "position": {
                          "start": {
                            "line": 1,
                            "column": 1,
                            "offset": 0
                          },
                          "end": {
                            "line": 1,
                            "column": 23,
                            "offset": 22
                          },
                          "indent": []
                        }
                      }
                    ],
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 23,
                        "offset": 22
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 23,
                    "offset": 22
                  }
                }
              },
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "name": "constructor",
          "kind": "function",
          "memberof": "Sink",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            {
              "name": "Sink",
              "kind": "class"
            },
            {
              "name": "constructor",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "Sink#constructor"
        }
      ],
      "static": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "This method says hello",
                    "position": {
                      "start": {
                        "line": 1,
                        "column": 1,
                        "offset": 0
                      },
                      "end": {
                        "line": 1,
                        "column": 23,
                        "offset": 22
                      },
                      "indent": []
                    }
                  }
                ],
                "position": {
                  "start": {
                    "line": 1,
                    "column": 1,
                    "offset": 0
                  },
                  "end": {
                    "line": 1,
                    "column": 23,
                    "offset": 22
                  },
                  "indent": []
                }
              }
            ],
            "position": {
              "start": {
                "line": 1,
                "column": 1,
                "offset": 0
              },
              "end": {
                "line": 1,
                "column": 23,
                "offset": 22
              }
            }
          },
          "tags": [],
          "loc": {
            "start": {
              "line": 39,
              "column": 2
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 42,
                "column": 2
              },
              "end": {
                "line": 44,
                "column": 3
              }
            },
            "code": "/**\n * This function destructures with defaults. It should not\n * have any parameter descriptions.\n */\nfunction destructure({phoneNumbers = [], emailAddresses = [], ...params} = {}) {\n}\n\n/**\n * Similar, but with an array\n * @example\n * destructure([1, 2, 3])\n */\nfunction destructure([a, b, c]) {\n}\n\n/**\n * This function returns the number one.\n * @param {Array<Number>} a an array of numbers\n * @returns {Number} numberone\n */\nvar multiply = (a, b) => a * b;\n\n/**\n * This is a sink\n */\nclass Sink {\n  /**\n   * This is a property of the sink.\n   */\n  staticProp = 42;\n\n  /**\n   * Is it empty\n   */\n  empty() {\n    return 1;\n  }\n\n  /**\n   * This method says hello\n   */\n  static hello() {\n    return 'hello';\n  }\n\n  /**\n   * This is a getter method: it should be documented\n   * as a property.\n   */\n  get aGetter() {\n    return 42;\n  }\n\n  /**\n   * @param {number} height the height of the thing\n   * @param {number} width the width of the thing\n   */\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\n/**\n * This method returns a basket. The type should not be linked.\n *\n * @returns {Basket} a basket\n */\nfunction makeABasket() {\n}\n\n/**\n * This method returns a {@link Sink sink}. The type should be linked.\n * It takes a {@link number} which should also be linked.\n *\n * @returns {Sink} a sink\n */\nfunction makeASink() {\n}\n\n/**\n * This function takes rest params\n */\nfunction functionWithRest(...someParams) {\n}\n\n/**\n * So does this one, with types\n */\nfunction functionWithRestAndType(...someParams: number) {\n}\n\n// FUNCTION TYPES\n\n/**\n * This is an async method\n */\nasync function foo() { }\n\nexport default multiply;\n\n/**\n * @public\n */\nexport default (thisIsTheArgument) => {};\n\n/**\n * This function returns the number one.\n * @returns {Number} numberone\n */\nmodule.exports = () => (<p>hello</p>);\n\n/**\n * This tests our support of optional parameters in ES6\n */\nfunction veryImportantTransform(foo = 'bar') {\n  return \"42\";\n}\n\n// ACCESS LEVELS\n\n/**\n * A private function\n * @private\n */\nfunction iAmPrivate() { }\n\n/**\n * A protected function\n * @protected\n */\nfunction iAmProtected() { }\n\n/**\n * A public function\n * @public\n */\nfunction iAmPublic() { }\n\n/**\n * A private function using the access tag\n * @access private\n */\nfunction iAmAccessPrivate() { }\n\n/**\n * This is re-exported\n */\nexport { execute } from 'external-module';\n"
          },
          "errors": [],
          "name": "hello",
          "kind": "function",
          "memberof": "Sink",
          "scope": "static",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            {
              "name": "Sink",
              "kind": "class"
            },
            {
              "name": "hello",
              "kind": "function",
              "scope": "static"
            }
          ],
          "namespace": "Sink.hello"
        }
      ],
      "events": []
    },
    "path": [
      {
        "name": "Sink",
        "kind": "class"
      }
    ],
    "namespace": "Sink"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "This method returns a basket. The type should not be linked.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 61,
                  "offset": 60
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 61,
              "offset": 60
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 61,
          "offset": 60
        }
      }
    },
    "tags": [
      {
        "title": "returns",
        "description": "a basket",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "Basket"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 64,
        "column": 0
      },
      "end": {
        "line": 68,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 69,
          "column": 0
        },
        "end": {
          "line": 70,
          "column": 1
        }
      },
      "code": "/**\n * This function destructures with defaults. It should not\n * have any parameter descriptions.\n */\nfunction destructure({phoneNumbers = [], emailAddresses = [], ...params} = {}) {\n}\n\n/**\n * Similar, but with an array\n * @example\n * destructure([1, 2, 3])\n */\nfunction destructure([a, b, c]) {\n}\n\n/**\n * This function returns the number one.\n * @param {Array<Number>} a an array of numbers\n * @returns {Number} numberone\n */\nvar multiply = (a, b) => a * b;\n\n/**\n * This is a sink\n */\nclass Sink {\n  /**\n   * This is a property of the sink.\n   */\n  staticProp = 42;\n\n  /**\n   * Is it empty\n   */\n  empty() {\n    return 1;\n  }\n\n  /**\n   * This method says hello\n   */\n  static hello() {\n    return 'hello';\n  }\n\n  /**\n   * This is a getter method: it should be documented\n   * as a property.\n   */\n  get aGetter() {\n    return 42;\n  }\n\n  /**\n   * @param {number} height the height of the thing\n   * @param {number} width the width of the thing\n   */\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\n/**\n * This method returns a basket. The type should not be linked.\n *\n * @returns {Basket} a basket\n */\nfunction makeABasket() {\n}\n\n/**\n * This method returns a {@link Sink sink}. The type should be linked.\n * It takes a {@link number} which should also be linked.\n *\n * @returns {Sink} a sink\n */\nfunction makeASink() {\n}\n\n/**\n * This function takes rest params\n */\nfunction functionWithRest(...someParams) {\n}\n\n/**\n * So does this one, with types\n */\nfunction functionWithRestAndType(...someParams: number) {\n}\n\n// FUNCTION TYPES\n\n/**\n * This is an async method\n */\nasync function foo() { }\n\nexport default multiply;\n\n/**\n * @public\n */\nexport default (thisIsTheArgument) => {};\n\n/**\n * This function returns the number one.\n * @returns {Number} numberone\n */\nmodule.exports = () => (<p>hello</p>);\n\n/**\n * This tests our support of optional parameters in ES6\n */\nfunction veryImportantTransform(foo = 'bar') {\n  return \"42\";\n}\n\n// ACCESS LEVELS\n\n/**\n * A private function\n * @private\n */\nfunction iAmPrivate() { }\n\n/**\n * A protected function\n * @protected\n */\nfunction iAmProtected() { }\n\n/**\n * A public function\n * @public\n */\nfunction iAmPublic() { }\n\n/**\n * A private function using the access tag\n * @access private\n */\nfunction iAmAccessPrivate() { }\n\n/**\n * This is re-exported\n */\nexport { execute } from 'external-module';\n"
    },
    "errors": [],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "a basket",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 9,
                      "offset": 8
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 9,
                  "offset": 8
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 9,
              "offset": 8
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Basket"
        }
      }
    ],
    "name": "makeABasket",
    "kind": "function",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "makeABasket",
        "kind": "function"
      }
    ],
    "namespace": "makeABasket"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "This method returns a ",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 23,
                  "offset": 22
                },
                "indent": []
              }
            },
            {
              "type": "link",
              "url": "Sink",
              "title": null,
              "jsdoc": true,
              "children": [
                {
                  "type": "text",
                  "value": "sink"
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 23,
                  "offset": 22
                },
                "end": {
                  "line": 1,
                  "column": 40,
                  "offset": 39
                },
                "indent": []
              }
            },
            {
              "type": "text",
              "value": ". The type should be linked.\nIt takes a ",
              "position": {
                "start": {
                  "line": 1,
                  "column": 40,
                  "offset": 39
                },
                "end": {
                  "line": 2,
                  "column": 12,
                  "offset": 79
                },
                "indent": [
                  1
                ]
              }
            },
            {
              "type": "link",
              "url": "number",
              "title": null,
              "jsdoc": true,
              "children": [
                {
                  "type": "text",
                  "value": "number"
                }
              ],
              "position": {
                "start": {
                  "line": 2,
                  "column": 12,
                  "offset": 79
                },
                "end": {
                  "line": 2,
                  "column": 26,
                  "offset": 93
                },
                "indent": []
              }
            },
            {
              "type": "text",
              "value": " which should also be linked.",
              "position": {
                "start": {
                  "line": 2,
                  "column": 26,
                  "offset": 93
                },
                "end": {
                  "line": 2,
                  "column": 55,
                  "offset": 122
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 2,
              "column": 55,
              "offset": 122
            },
            "indent": [
              1
            ]
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 2,
          "column": 55,
          "offset": 122
        }
      }
    },
    "tags": [
      {
        "title": "returns",
        "description": "a sink",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "Sink"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 72,
        "column": 0
      },
      "end": {
        "line": 77,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 78,
          "column": 0
        },
        "end": {
          "line": 79,
          "column": 1
        }
      },
      "code": "/**\n * This function destructures with defaults. It should not\n * have any parameter descriptions.\n */\nfunction destructure({phoneNumbers = [], emailAddresses = [], ...params} = {}) {\n}\n\n/**\n * Similar, but with an array\n * @example\n * destructure([1, 2, 3])\n */\nfunction destructure([a, b, c]) {\n}\n\n/**\n * This function returns the number one.\n * @param {Array<Number>} a an array of numbers\n * @returns {Number} numberone\n */\nvar multiply = (a, b) => a * b;\n\n/**\n * This is a sink\n */\nclass Sink {\n  /**\n   * This is a property of the sink.\n   */\n  staticProp = 42;\n\n  /**\n   * Is it empty\n   */\n  empty() {\n    return 1;\n  }\n\n  /**\n   * This method says hello\n   */\n  static hello() {\n    return 'hello';\n  }\n\n  /**\n   * This is a getter method: it should be documented\n   * as a property.\n   */\n  get aGetter() {\n    return 42;\n  }\n\n  /**\n   * @param {number} height the height of the thing\n   * @param {number} width the width of the thing\n   */\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\n/**\n * This method returns a basket. The type should not be linked.\n *\n * @returns {Basket} a basket\n */\nfunction makeABasket() {\n}\n\n/**\n * This method returns a {@link Sink sink}. The type should be linked.\n * It takes a {@link number} which should also be linked.\n *\n * @returns {Sink} a sink\n */\nfunction makeASink() {\n}\n\n/**\n * This function takes rest params\n */\nfunction functionWithRest(...someParams) {\n}\n\n/**\n * So does this one, with types\n */\nfunction functionWithRestAndType(...someParams: number) {\n}\n\n// FUNCTION TYPES\n\n/**\n * This is an async method\n */\nasync function foo() { }\n\nexport default multiply;\n\n/**\n * @public\n */\nexport default (thisIsTheArgument) => {};\n\n/**\n * This function returns the number one.\n * @returns {Number} numberone\n */\nmodule.exports = () => (<p>hello</p>);\n\n/**\n * This tests our support of optional parameters in ES6\n */\nfunction veryImportantTransform(foo = 'bar') {\n  return \"42\";\n}\n\n// ACCESS LEVELS\n\n/**\n * A private function\n * @private\n */\nfunction iAmPrivate() { }\n\n/**\n * A protected function\n * @protected\n */\nfunction iAmProtected() { }\n\n/**\n * A public function\n * @public\n */\nfunction iAmPublic() { }\n\n/**\n * A private function using the access tag\n * @access private\n */\nfunction iAmAccessPrivate() { }\n\n/**\n * This is re-exported\n */\nexport { execute } from 'external-module';\n"
    },
    "errors": [],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "a sink",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 7,
                      "offset": 6
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 7,
                  "offset": 6
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 7,
              "offset": 6
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Sink"
        }
      }
    ],
    "name": "makeASink",
    "kind": "function",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "makeASink",
        "kind": "function"
      }
    ],
    "namespace": "makeASink"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "This function takes rest params",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 32,
                  "offset": 31
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 32,
              "offset": 31
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 32,
          "offset": 31
        }
      }
    },
    "tags": [],
    "loc": {
      "start": {
        "line": 81,
        "column": 0
      },
      "end": {
        "line": 83,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 84,
          "column": 0
        },
        "end": {
          "line": 85,
          "column": 1
        }
      },
      "code": "/**\n * This function destructures with defaults. It should not\n * have any parameter descriptions.\n */\nfunction destructure({phoneNumbers = [], emailAddresses = [], ...params} = {}) {\n}\n\n/**\n * Similar, but with an array\n * @example\n * destructure([1, 2, 3])\n */\nfunction destructure([a, b, c]) {\n}\n\n/**\n * This function returns the number one.\n * @param {Array<Number>} a an array of numbers\n * @returns {Number} numberone\n */\nvar multiply = (a, b) => a * b;\n\n/**\n * This is a sink\n */\nclass Sink {\n  /**\n   * This is a property of the sink.\n   */\n  staticProp = 42;\n\n  /**\n   * Is it empty\n   */\n  empty() {\n    return 1;\n  }\n\n  /**\n   * This method says hello\n   */\n  static hello() {\n    return 'hello';\n  }\n\n  /**\n   * This is a getter method: it should be documented\n   * as a property.\n   */\n  get aGetter() {\n    return 42;\n  }\n\n  /**\n   * @param {number} height the height of the thing\n   * @param {number} width the width of the thing\n   */\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\n/**\n * This method returns a basket. The type should not be linked.\n *\n * @returns {Basket} a basket\n */\nfunction makeABasket() {\n}\n\n/**\n * This method returns a {@link Sink sink}. The type should be linked.\n * It takes a {@link number} which should also be linked.\n *\n * @returns {Sink} a sink\n */\nfunction makeASink() {\n}\n\n/**\n * This function takes rest params\n */\nfunction functionWithRest(...someParams) {\n}\n\n/**\n * So does this one, with types\n */\nfunction functionWithRestAndType(...someParams: number) {\n}\n\n// FUNCTION TYPES\n\n/**\n * This is an async method\n */\nasync function foo() { }\n\nexport default multiply;\n\n/**\n * @public\n */\nexport default (thisIsTheArgument) => {};\n\n/**\n * This function returns the number one.\n * @returns {Number} numberone\n */\nmodule.exports = () => (<p>hello</p>);\n\n/**\n * This tests our support of optional parameters in ES6\n */\nfunction veryImportantTransform(foo = 'bar') {\n  return \"42\";\n}\n\n// ACCESS LEVELS\n\n/**\n * A private function\n * @private\n */\nfunction iAmPrivate() { }\n\n/**\n * A protected function\n * @protected\n */\nfunction iAmProtected() { }\n\n/**\n * A public function\n * @public\n */\nfunction iAmPublic() { }\n\n/**\n * A private function using the access tag\n * @access private\n */\nfunction iAmAccessPrivate() { }\n\n/**\n * This is re-exported\n */\nexport { execute } from 'external-module';\n"
    },
    "errors": [],
    "name": "functionWithRest",
    "kind": "function",
    "params": [
      {
        "title": "param",
        "name": "someParams",
        "lineNumber": 84,
        "type": {
          "type": "RestType"
        }
      }
    ],
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "functionWithRest",
        "kind": "function"
      }
    ],
    "namespace": "functionWithRest"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "So does this one, with types",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 29,
                  "offset": 28
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 29,
              "offset": 28
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 29,
          "offset": 28
        }
      }
    },
    "tags": [],
    "loc": {
      "start": {
        "line": 87,
        "column": 0
      },
      "end": {
        "line": 89,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 90,
          "column": 0
        },
        "end": {
          "line": 91,
          "column": 1
        }
      },
      "code": "/**\n * This function destructures with defaults. It should not\n * have any parameter descriptions.\n */\nfunction destructure({phoneNumbers = [], emailAddresses = [], ...params} = {}) {\n}\n\n/**\n * Similar, but with an array\n * @example\n * destructure([1, 2, 3])\n */\nfunction destructure([a, b, c]) {\n}\n\n/**\n * This function returns the number one.\n * @param {Array<Number>} a an array of numbers\n * @returns {Number} numberone\n */\nvar multiply = (a, b) => a * b;\n\n/**\n * This is a sink\n */\nclass Sink {\n  /**\n   * This is a property of the sink.\n   */\n  staticProp = 42;\n\n  /**\n   * Is it empty\n   */\n  empty() {\n    return 1;\n  }\n\n  /**\n   * This method says hello\n   */\n  static hello() {\n    return 'hello';\n  }\n\n  /**\n   * This is a getter method: it should be documented\n   * as a property.\n   */\n  get aGetter() {\n    return 42;\n  }\n\n  /**\n   * @param {number} height the height of the thing\n   * @param {number} width the width of the thing\n   */\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\n/**\n * This method returns a basket. The type should not be linked.\n *\n * @returns {Basket} a basket\n */\nfunction makeABasket() {\n}\n\n/**\n * This method returns a {@link Sink sink}. The type should be linked.\n * It takes a {@link number} which should also be linked.\n *\n * @returns {Sink} a sink\n */\nfunction makeASink() {\n}\n\n/**\n * This function takes rest params\n */\nfunction functionWithRest(...someParams) {\n}\n\n/**\n * So does this one, with types\n */\nfunction functionWithRestAndType(...someParams: number) {\n}\n\n// FUNCTION TYPES\n\n/**\n * This is an async method\n */\nasync function foo() { }\n\nexport default multiply;\n\n/**\n * @public\n */\nexport default (thisIsTheArgument) => {};\n\n/**\n * This function returns the number one.\n * @returns {Number} numberone\n */\nmodule.exports = () => (<p>hello</p>);\n\n/**\n * This tests our support of optional parameters in ES6\n */\nfunction veryImportantTransform(foo = 'bar') {\n  return \"42\";\n}\n\n// ACCESS LEVELS\n\n/**\n * A private function\n * @private\n */\nfunction iAmPrivate() { }\n\n/**\n * A protected function\n * @protected\n */\nfunction iAmProtected() { }\n\n/**\n * A public function\n * @public\n */\nfunction iAmPublic() { }\n\n/**\n * A private function using the access tag\n * @access private\n */\nfunction iAmAccessPrivate() { }\n\n/**\n * This is re-exported\n */\nexport { execute } from 'external-module';\n"
    },
    "errors": [],
    "name": "functionWithRestAndType",
    "kind": "function",
    "params": [
      {
        "title": "param",
        "name": "someParams",
        "lineNumber": 90,
        "type": {
          "type": "RestType",
          "expression": {
            "type": "NameExpression",
            "name": "number"
          }
        }
      }
    ],
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "functionWithRestAndType",
        "kind": "function"
      }
    ],
    "namespace": "functionWithRestAndType"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "This is an async method",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 24,
                  "offset": 23
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 24,
              "offset": 23
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 24,
          "offset": 23
        }
      }
    },
    "tags": [],
    "loc": {
      "start": {
        "line": 95,
        "column": 0
      },
      "end": {
        "line": 97,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 98,
          "column": 0
        },
        "end": {
          "line": 98,
          "column": 24
        }
      },
      "code": "/**\n * This function destructures with defaults. It should not\n * have any parameter descriptions.\n */\nfunction destructure({phoneNumbers = [], emailAddresses = [], ...params} = {}) {\n}\n\n/**\n * Similar, but with an array\n * @example\n * destructure([1, 2, 3])\n */\nfunction destructure([a, b, c]) {\n}\n\n/**\n * This function returns the number one.\n * @param {Array<Number>} a an array of numbers\n * @returns {Number} numberone\n */\nvar multiply = (a, b) => a * b;\n\n/**\n * This is a sink\n */\nclass Sink {\n  /**\n   * This is a property of the sink.\n   */\n  staticProp = 42;\n\n  /**\n   * Is it empty\n   */\n  empty() {\n    return 1;\n  }\n\n  /**\n   * This method says hello\n   */\n  static hello() {\n    return 'hello';\n  }\n\n  /**\n   * This is a getter method: it should be documented\n   * as a property.\n   */\n  get aGetter() {\n    return 42;\n  }\n\n  /**\n   * @param {number} height the height of the thing\n   * @param {number} width the width of the thing\n   */\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\n/**\n * This method returns a basket. The type should not be linked.\n *\n * @returns {Basket} a basket\n */\nfunction makeABasket() {\n}\n\n/**\n * This method returns a {@link Sink sink}. The type should be linked.\n * It takes a {@link number} which should also be linked.\n *\n * @returns {Sink} a sink\n */\nfunction makeASink() {\n}\n\n/**\n * This function takes rest params\n */\nfunction functionWithRest(...someParams) {\n}\n\n/**\n * So does this one, with types\n */\nfunction functionWithRestAndType(...someParams: number) {\n}\n\n// FUNCTION TYPES\n\n/**\n * This is an async method\n */\nasync function foo() { }\n\nexport default multiply;\n\n/**\n * @public\n */\nexport default (thisIsTheArgument) => {};\n\n/**\n * This function returns the number one.\n * @returns {Number} numberone\n */\nmodule.exports = () => (<p>hello</p>);\n\n/**\n * This tests our support of optional parameters in ES6\n */\nfunction veryImportantTransform(foo = 'bar') {\n  return \"42\";\n}\n\n// ACCESS LEVELS\n\n/**\n * A private function\n * @private\n */\nfunction iAmPrivate() { }\n\n/**\n * A protected function\n * @protected\n */\nfunction iAmProtected() { }\n\n/**\n * A public function\n * @public\n */\nfunction iAmPublic() { }\n\n/**\n * A private function using the access tag\n * @access private\n */\nfunction iAmAccessPrivate() { }\n\n/**\n * This is re-exported\n */\nexport { execute } from 'external-module';\n"
    },
    "errors": [],
    "name": "foo",
    "kind": "function",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "foo",
        "kind": "function"
      }
    ],
    "namespace": "foo"
  },
  {
    "description": "",
    "tags": [
      {
        "title": "public",
        "description": null,
        "lineNumber": 1
      }
    ],
    "loc": {
      "start": {
        "line": 102,
        "column": 0
      },
      "end": {
        "line": 104,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 105,
          "column": 0
        },
        "end": {
          "line": 105,
          "column": 41
        }
      },
      "code": "/**\n * This function destructures with defaults. It should not\n * have any parameter descriptions.\n */\nfunction destructure({phoneNumbers = [], emailAddresses = [], ...params} = {}) {\n}\n\n/**\n * Similar, but with an array\n * @example\n * destructure([1, 2, 3])\n */\nfunction destructure([a, b, c]) {\n}\n\n/**\n * This function returns the number one.\n * @param {Array<Number>} a an array of numbers\n * @returns {Number} numberone\n */\nvar multiply = (a, b) => a * b;\n\n/**\n * This is a sink\n */\nclass Sink {\n  /**\n   * This is a property of the sink.\n   */\n  staticProp = 42;\n\n  /**\n   * Is it empty\n   */\n  empty() {\n    return 1;\n  }\n\n  /**\n   * This method says hello\n   */\n  static hello() {\n    return 'hello';\n  }\n\n  /**\n   * This is a getter method: it should be documented\n   * as a property.\n   */\n  get aGetter() {\n    return 42;\n  }\n\n  /**\n   * @param {number} height the height of the thing\n   * @param {number} width the width of the thing\n   */\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\n/**\n * This method returns a basket. The type should not be linked.\n *\n * @returns {Basket} a basket\n */\nfunction makeABasket() {\n}\n\n/**\n * This method returns a {@link Sink sink}. The type should be linked.\n * It takes a {@link number} which should also be linked.\n *\n * @returns {Sink} a sink\n */\nfunction makeASink() {\n}\n\n/**\n * This function takes rest params\n */\nfunction functionWithRest(...someParams) {\n}\n\n/**\n * So does this one, with types\n */\nfunction functionWithRestAndType(...someParams: number) {\n}\n\n// FUNCTION TYPES\n\n/**\n * This is an async method\n */\nasync function foo() { }\n\nexport default multiply;\n\n/**\n * @public\n */\nexport default (thisIsTheArgument) => {};\n\n/**\n * This function returns the number one.\n * @returns {Number} numberone\n */\nmodule.exports = () => (<p>hello</p>);\n\n/**\n * This tests our support of optional parameters in ES6\n */\nfunction veryImportantTransform(foo = 'bar') {\n  return \"42\";\n}\n\n// ACCESS LEVELS\n\n/**\n * A private function\n * @private\n */\nfunction iAmPrivate() { }\n\n/**\n * A protected function\n * @protected\n */\nfunction iAmProtected() { }\n\n/**\n * A public function\n * @public\n */\nfunction iAmPublic() { }\n\n/**\n * A private function using the access tag\n * @access private\n */\nfunction iAmAccessPrivate() { }\n\n/**\n * This is re-exported\n */\nexport { execute } from 'external-module';\n"
    },
    "errors": [],
    "access": "public",
    "name": "es6.input",
    "params": [
      {
        "title": "param",
        "name": "thisIsTheArgument",
        "lineNumber": 105
      }
    ],
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "es6.input"
      }
    ],
    "namespace": "es6.input"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "This function returns the number one.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 38,
                  "offset": 37
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 38,
              "offset": 37
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 38,
          "offset": 37
        }
      }
    },
    "tags": [
      {
        "title": "returns",
        "description": "numberone",
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "Number"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 107,
        "column": 0
      },
      "end": {
        "line": 110,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 111,
          "column": 0
        },
        "end": {
          "line": 111,
          "column": 38
        }
      },
      "code": "/**\n * This function destructures with defaults. It should not\n * have any parameter descriptions.\n */\nfunction destructure({phoneNumbers = [], emailAddresses = [], ...params} = {}) {\n}\n\n/**\n * Similar, but with an array\n * @example\n * destructure([1, 2, 3])\n */\nfunction destructure([a, b, c]) {\n}\n\n/**\n * This function returns the number one.\n * @param {Array<Number>} a an array of numbers\n * @returns {Number} numberone\n */\nvar multiply = (a, b) => a * b;\n\n/**\n * This is a sink\n */\nclass Sink {\n  /**\n   * This is a property of the sink.\n   */\n  staticProp = 42;\n\n  /**\n   * Is it empty\n   */\n  empty() {\n    return 1;\n  }\n\n  /**\n   * This method says hello\n   */\n  static hello() {\n    return 'hello';\n  }\n\n  /**\n   * This is a getter method: it should be documented\n   * as a property.\n   */\n  get aGetter() {\n    return 42;\n  }\n\n  /**\n   * @param {number} height the height of the thing\n   * @param {number} width the width of the thing\n   */\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\n/**\n * This method returns a basket. The type should not be linked.\n *\n * @returns {Basket} a basket\n */\nfunction makeABasket() {\n}\n\n/**\n * This method returns a {@link Sink sink}. The type should be linked.\n * It takes a {@link number} which should also be linked.\n *\n * @returns {Sink} a sink\n */\nfunction makeASink() {\n}\n\n/**\n * This function takes rest params\n */\nfunction functionWithRest(...someParams) {\n}\n\n/**\n * So does this one, with types\n */\nfunction functionWithRestAndType(...someParams: number) {\n}\n\n// FUNCTION TYPES\n\n/**\n * This is an async method\n */\nasync function foo() { }\n\nexport default multiply;\n\n/**\n * @public\n */\nexport default (thisIsTheArgument) => {};\n\n/**\n * This function returns the number one.\n * @returns {Number} numberone\n */\nmodule.exports = () => (<p>hello</p>);\n\n/**\n * This tests our support of optional parameters in ES6\n */\nfunction veryImportantTransform(foo = 'bar') {\n  return \"42\";\n}\n\n// ACCESS LEVELS\n\n/**\n * A private function\n * @private\n */\nfunction iAmPrivate() { }\n\n/**\n * A protected function\n * @protected\n */\nfunction iAmProtected() { }\n\n/**\n * A public function\n * @public\n */\nfunction iAmPublic() { }\n\n/**\n * A private function using the access tag\n * @access private\n */\nfunction iAmAccessPrivate() { }\n\n/**\n * This is re-exported\n */\nexport { execute } from 'external-module';\n"
    },
    "errors": [],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "numberone",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 10,
                      "offset": 9
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 10,
                  "offset": 9
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 10,
              "offset": 9
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Number"
        }
      }
    ],
    "name": "es6.input",
    "kind": "function",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "es6.input",
        "kind": "function"
      }
    ],
    "namespace": "es6.input"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "This tests our support of optional parameters in ES6",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 53,
                  "offset": 52
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 53,
              "offset": 52
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 53,
          "offset": 52
        }
      }
    },
    "tags": [],
    "loc": {
      "start": {
        "line": 113,
        "column": 0
      },
      "end": {
        "line": 115,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 116,
          "column": 0
        },
        "end": {
          "line": 118,
          "column": 1
        }
      },
      "code": "/**\n * This function destructures with defaults. It should not\n * have any parameter descriptions.\n */\nfunction destructure({phoneNumbers = [], emailAddresses = [], ...params} = {}) {\n}\n\n/**\n * Similar, but with an array\n * @example\n * destructure([1, 2, 3])\n */\nfunction destructure([a, b, c]) {\n}\n\n/**\n * This function returns the number one.\n * @param {Array<Number>} a an array of numbers\n * @returns {Number} numberone\n */\nvar multiply = (a, b) => a * b;\n\n/**\n * This is a sink\n */\nclass Sink {\n  /**\n   * This is a property of the sink.\n   */\n  staticProp = 42;\n\n  /**\n   * Is it empty\n   */\n  empty() {\n    return 1;\n  }\n\n  /**\n   * This method says hello\n   */\n  static hello() {\n    return 'hello';\n  }\n\n  /**\n   * This is a getter method: it should be documented\n   * as a property.\n   */\n  get aGetter() {\n    return 42;\n  }\n\n  /**\n   * @param {number} height the height of the thing\n   * @param {number} width the width of the thing\n   */\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\n/**\n * This method returns a basket. The type should not be linked.\n *\n * @returns {Basket} a basket\n */\nfunction makeABasket() {\n}\n\n/**\n * This method returns a {@link Sink sink}. The type should be linked.\n * It takes a {@link number} which should also be linked.\n *\n * @returns {Sink} a sink\n */\nfunction makeASink() {\n}\n\n/**\n * This function takes rest params\n */\nfunction functionWithRest(...someParams) {\n}\n\n/**\n * So does this one, with types\n */\nfunction functionWithRestAndType(...someParams: number) {\n}\n\n// FUNCTION TYPES\n\n/**\n * This is an async method\n */\nasync function foo() { }\n\nexport default multiply;\n\n/**\n * @public\n */\nexport default (thisIsTheArgument) => {};\n\n/**\n * This function returns the number one.\n * @returns {Number} numberone\n */\nmodule.exports = () => (<p>hello</p>);\n\n/**\n * This tests our support of optional parameters in ES6\n */\nfunction veryImportantTransform(foo = 'bar') {\n  return \"42\";\n}\n\n// ACCESS LEVELS\n\n/**\n * A private function\n * @private\n */\nfunction iAmPrivate() { }\n\n/**\n * A protected function\n * @protected\n */\nfunction iAmProtected() { }\n\n/**\n * A public function\n * @public\n */\nfunction iAmPublic() { }\n\n/**\n * A private function using the access tag\n * @access private\n */\nfunction iAmAccessPrivate() { }\n\n/**\n * This is re-exported\n */\nexport { execute } from 'external-module';\n"
    },
    "errors": [],
    "name": "veryImportantTransform",
    "kind": "function",
    "params": [
      {
        "title": "param",
        "name": "foo",
        "default": "'bar'"
      }
    ],
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "veryImportantTransform",
        "kind": "function"
      }
    ],
    "namespace": "veryImportantTransform"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "A protected function",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 21,
                  "offset": 20
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 21,
              "offset": 20
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 21,
          "offset": 20
        }
      }
    },
    "tags": [
      {
        "title": "protected",
        "description": null,
        "lineNumber": 2
      }
    ],
    "loc": {
      "start": {
        "line": 128,
        "column": 0
      },
      "end": {
        "line": 131,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 132,
          "column": 0
        },
        "end": {
          "line": 132,
          "column": 27
        }
      },
      "code": "/**\n * This function destructures with defaults. It should not\n * have any parameter descriptions.\n */\nfunction destructure({phoneNumbers = [], emailAddresses = [], ...params} = {}) {\n}\n\n/**\n * Similar, but with an array\n * @example\n * destructure([1, 2, 3])\n */\nfunction destructure([a, b, c]) {\n}\n\n/**\n * This function returns the number one.\n * @param {Array<Number>} a an array of numbers\n * @returns {Number} numberone\n */\nvar multiply = (a, b) => a * b;\n\n/**\n * This is a sink\n */\nclass Sink {\n  /**\n   * This is a property of the sink.\n   */\n  staticProp = 42;\n\n  /**\n   * Is it empty\n   */\n  empty() {\n    return 1;\n  }\n\n  /**\n   * This method says hello\n   */\n  static hello() {\n    return 'hello';\n  }\n\n  /**\n   * This is a getter method: it should be documented\n   * as a property.\n   */\n  get aGetter() {\n    return 42;\n  }\n\n  /**\n   * @param {number} height the height of the thing\n   * @param {number} width the width of the thing\n   */\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\n/**\n * This method returns a basket. The type should not be linked.\n *\n * @returns {Basket} a basket\n */\nfunction makeABasket() {\n}\n\n/**\n * This method returns a {@link Sink sink}. The type should be linked.\n * It takes a {@link number} which should also be linked.\n *\n * @returns {Sink} a sink\n */\nfunction makeASink() {\n}\n\n/**\n * This function takes rest params\n */\nfunction functionWithRest(...someParams) {\n}\n\n/**\n * So does this one, with types\n */\nfunction functionWithRestAndType(...someParams: number) {\n}\n\n// FUNCTION TYPES\n\n/**\n * This is an async method\n */\nasync function foo() { }\n\nexport default multiply;\n\n/**\n * @public\n */\nexport default (thisIsTheArgument) => {};\n\n/**\n * This function returns the number one.\n * @returns {Number} numberone\n */\nmodule.exports = () => (<p>hello</p>);\n\n/**\n * This tests our support of optional parameters in ES6\n */\nfunction veryImportantTransform(foo = 'bar') {\n  return \"42\";\n}\n\n// ACCESS LEVELS\n\n/**\n * A private function\n * @private\n */\nfunction iAmPrivate() { }\n\n/**\n * A protected function\n * @protected\n */\nfunction iAmProtected() { }\n\n/**\n * A public function\n * @public\n */\nfunction iAmPublic() { }\n\n/**\n * A private function using the access tag\n * @access private\n */\nfunction iAmAccessPrivate() { }\n\n/**\n * This is re-exported\n */\nexport { execute } from 'external-module';\n"
    },
    "errors": [],
    "access": "protected",
    "name": "iAmProtected",
    "kind": "function",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "iAmProtected",
        "kind": "function"
      }
    ],
    "namespace": "iAmProtected"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "A public function",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 18,
                  "offset": 17
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 18,
              "offset": 17
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 18,
          "offset": 17
        }
      }
    },
    "tags": [
      {
        "title": "public",
        "description": null,
        "lineNumber": 2
      }
    ],
    "loc": {
      "start": {
        "line": 134,
        "column": 0
      },
      "end": {
        "line": 137,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 138,
          "column": 0
        },
        "end": {
          "line": 138,
          "column": 24
        }
      },
      "code": "/**\n * This function destructures with defaults. It should not\n * have any parameter descriptions.\n */\nfunction destructure({phoneNumbers = [], emailAddresses = [], ...params} = {}) {\n}\n\n/**\n * Similar, but with an array\n * @example\n * destructure([1, 2, 3])\n */\nfunction destructure([a, b, c]) {\n}\n\n/**\n * This function returns the number one.\n * @param {Array<Number>} a an array of numbers\n * @returns {Number} numberone\n */\nvar multiply = (a, b) => a * b;\n\n/**\n * This is a sink\n */\nclass Sink {\n  /**\n   * This is a property of the sink.\n   */\n  staticProp = 42;\n\n  /**\n   * Is it empty\n   */\n  empty() {\n    return 1;\n  }\n\n  /**\n   * This method says hello\n   */\n  static hello() {\n    return 'hello';\n  }\n\n  /**\n   * This is a getter method: it should be documented\n   * as a property.\n   */\n  get aGetter() {\n    return 42;\n  }\n\n  /**\n   * @param {number} height the height of the thing\n   * @param {number} width the width of the thing\n   */\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\n/**\n * This method returns a basket. The type should not be linked.\n *\n * @returns {Basket} a basket\n */\nfunction makeABasket() {\n}\n\n/**\n * This method returns a {@link Sink sink}. The type should be linked.\n * It takes a {@link number} which should also be linked.\n *\n * @returns {Sink} a sink\n */\nfunction makeASink() {\n}\n\n/**\n * This function takes rest params\n */\nfunction functionWithRest(...someParams) {\n}\n\n/**\n * So does this one, with types\n */\nfunction functionWithRestAndType(...someParams: number) {\n}\n\n// FUNCTION TYPES\n\n/**\n * This is an async method\n */\nasync function foo() { }\n\nexport default multiply;\n\n/**\n * @public\n */\nexport default (thisIsTheArgument) => {};\n\n/**\n * This function returns the number one.\n * @returns {Number} numberone\n */\nmodule.exports = () => (<p>hello</p>);\n\n/**\n * This tests our support of optional parameters in ES6\n */\nfunction veryImportantTransform(foo = 'bar') {\n  return \"42\";\n}\n\n// ACCESS LEVELS\n\n/**\n * A private function\n * @private\n */\nfunction iAmPrivate() { }\n\n/**\n * A protected function\n * @protected\n */\nfunction iAmProtected() { }\n\n/**\n * A public function\n * @public\n */\nfunction iAmPublic() { }\n\n/**\n * A private function using the access tag\n * @access private\n */\nfunction iAmAccessPrivate() { }\n\n/**\n * This is re-exported\n */\nexport { execute } from 'external-module';\n"
    },
    "errors": [],
    "access": "public",
    "name": "iAmPublic",
    "kind": "function",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "iAmPublic",
        "kind": "function"
      }
    ],
    "namespace": "iAmPublic"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "This is re-exported",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 20,
                  "offset": 19
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 20,
              "offset": 19
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 20,
          "offset": 19
        }
      }
    },
    "tags": [],
    "loc": {
      "start": {
        "line": 146,
        "column": 0
      },
      "end": {
        "line": 148,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 149,
          "column": 0
        },
        "end": {
          "line": 149,
          "column": 42
        }
      },
      "code": "/**\n * This function destructures with defaults. It should not\n * have any parameter descriptions.\n */\nfunction destructure({phoneNumbers = [], emailAddresses = [], ...params} = {}) {\n}\n\n/**\n * Similar, but with an array\n * @example\n * destructure([1, 2, 3])\n */\nfunction destructure([a, b, c]) {\n}\n\n/**\n * This function returns the number one.\n * @param {Array<Number>} a an array of numbers\n * @returns {Number} numberone\n */\nvar multiply = (a, b) => a * b;\n\n/**\n * This is a sink\n */\nclass Sink {\n  /**\n   * This is a property of the sink.\n   */\n  staticProp = 42;\n\n  /**\n   * Is it empty\n   */\n  empty() {\n    return 1;\n  }\n\n  /**\n   * This method says hello\n   */\n  static hello() {\n    return 'hello';\n  }\n\n  /**\n   * This is a getter method: it should be documented\n   * as a property.\n   */\n  get aGetter() {\n    return 42;\n  }\n\n  /**\n   * @param {number} height the height of the thing\n   * @param {number} width the width of the thing\n   */\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\n/**\n * This method returns a basket. The type should not be linked.\n *\n * @returns {Basket} a basket\n */\nfunction makeABasket() {\n}\n\n/**\n * This method returns a {@link Sink sink}. The type should be linked.\n * It takes a {@link number} which should also be linked.\n *\n * @returns {Sink} a sink\n */\nfunction makeASink() {\n}\n\n/**\n * This function takes rest params\n */\nfunction functionWithRest(...someParams) {\n}\n\n/**\n * So does this one, with types\n */\nfunction functionWithRestAndType(...someParams: number) {\n}\n\n// FUNCTION TYPES\n\n/**\n * This is an async method\n */\nasync function foo() { }\n\nexport default multiply;\n\n/**\n * @public\n */\nexport default (thisIsTheArgument) => {};\n\n/**\n * This function returns the number one.\n * @returns {Number} numberone\n */\nmodule.exports = () => (<p>hello</p>);\n\n/**\n * This tests our support of optional parameters in ES6\n */\nfunction veryImportantTransform(foo = 'bar') {\n  return \"42\";\n}\n\n// ACCESS LEVELS\n\n/**\n * A private function\n * @private\n */\nfunction iAmPrivate() { }\n\n/**\n * A protected function\n * @protected\n */\nfunction iAmProtected() { }\n\n/**\n * A public function\n * @public\n */\nfunction iAmPublic() { }\n\n/**\n * A private function using the access tag\n * @access private\n */\nfunction iAmAccessPrivate() { }\n\n/**\n * This is re-exported\n */\nexport { execute } from 'external-module';\n"
    },
    "errors": [],
    "name": "execute",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      {
        "name": "execute"
      }
    ],
    "namespace": "execute"
  }
]